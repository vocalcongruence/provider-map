<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Audio Masking Tool</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <!-- Inter from Google Fonts-->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />

    <style>
      :root {
        --color-main: #1f1f1f;
        --color-highlight: #363636;
        --color-highlight2: rgb(209, 209, 209);

        --color-pink: #d98abb;
        --color-pink-bright: #ebabd2;
        --color-blue: #8aa2d9;
        --color-blue-bright: #a9bdee;

        --gradient-ltr: linear-gradient(
          45deg,
          var(--color-pink) 0%,
          var(--color-blue) 100%
        );
        --gradient-ltr-bright: linear-gradient(
          45deg,
          var(--color-pink-bright) 0%,
          var(--color-blue-bright) 100%
        );

        --black: hsl(0, 0%, 0%);
        --darkestgray: hsl(0, 0%, 5%);
        --darkergray: hsl(0, 0%, 12%);
        --darkgray: hsl(0, 0%, 20%);
        --gray: hsl(0, 0%, 30%);
        --lightgray: hsl(0, 0%, 40%);
        --lightergray: hsl(0, 0%, 60%);
        --lightestgray: hsl(0, 0%, 80%);
        --white: hsl(0, 0%, 100%);

        --darkpink: hsl(323, 59%, 64%);
        --pink: #e496c6;
        --lightpink: hsl(323, 59%, 84%);
        --lighterpink: hsl(323, 59%, 89%);
        --darkblue: hsl(222, 51%, 60%);
        --blue: #8ba3da;
        --lightblue: hsl(222, 51%, 80%);
        --lighterblue: hsl(222, 51%, 90%);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;

        font-family: "Inter", sans-serif;
        color: var(--color-highlight2);

        accent-color: var(--color-pink);
      }

      .material-symbols-outlined {
        font-variation-settings: "FILL" 0, "wght" 400, "GRAD" 0, "opsz" 24;
        font-size: 24rem;
      }

      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
        background-color: var(--color-main);
        color: lightgray;
        font-family: sans-serif;
        padding: 16px;
        height: 100dvh;
      }
      h1 {
        font-size: 6rem;
        text-align: center;
      }
      button {
        width: 100%;
        height: 40vh;
        font-size: 10rem;
        user-select: none;
        background: var(--color-pink);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border-radius: 48px;
      }

      button span {
        color: var(--color-main);
      }
    </style>
  </head>
  <body>
    <h1>Audio Masking Tool</h1>
    <button id="intercom">
      <span id="intercom-icon" class="material-symbols-outlined"> mic </span><span id="intercom-label">Intercom</span>
    </button>
    <button id="playNoise">
      <span id="noise-icon" class="material-symbols-outlined"> volume_up </span><span id="noise-label">Start Noise</span>
    </button>

    <script>
      const noiseTrack = {
        volume: 0.1,
        fadeTime: 2,
        audioCtx: null,
        gainNode: null,
        source: null,
      };

      const intercomState = {
        audioCtx: null,
        stream: null,
        source: null,
        isConnected: false,
      };

      async function loadAndPlayNoise() {
        if (!noiseTrack.audioCtx) {
          noiseTrack.audioCtx = new (window.AudioContext ||
            window.webkitAudioContext)();
          noiseTrack.gainNode = noiseTrack.audioCtx.createGain();
          noiseTrack.gainNode.connect(noiseTrack.audioCtx.destination);
        }

        // Start at zero volume
        noiseTrack.gainNode.gain.setValueAtTime(
          noiseTrack.volume,
          noiseTrack.audioCtx.currentTime
        );

        const res = await fetch("noise.wav");
        const arrayBuffer = await res.arrayBuffer();
        const buffer = await noiseTrack.audioCtx.decodeAudioData(arrayBuffer);

        noiseTrack.source = noiseTrack.audioCtx.createBufferSource();
        noiseTrack.source.buffer = buffer;
        noiseTrack.source.loop = true;
        noiseTrack.source.connect(noiseTrack.gainNode);
        noiseTrack.source.start();

        
        document.getElementById("playNoise").onclick = () => stopNoise();
        document.getElementById("noise-label").innerText = "Stop Noise";
        document.getElementById("noise-icon").innerText = "volume_off";
      }

      function stopNoise() {
        noiseTrack.source.stop();
        document.getElementById("playNoise").onclick = () => loadAndPlayNoise();
        document.getElementById("noise-label").innerText = "Start Noise";
        document.getElementById("noise-icon").innerText = "volume_up";
      }

      function fadeNoiseTo(volume, time = 0.5) {
        const now = noiseTrack.audioCtx.currentTime;
        noiseTrack.gainNode.gain.cancelScheduledValues(now);
        noiseTrack.gainNode.gain.linearRampToValueAtTime(volume, now + time);
      }

      async function setupIntercomOnce() {
        if (intercomState.audioCtx) return;

        intercomState.audioCtx = new (window.AudioContext ||
          window.webkitAudioContext)();

        if (intercomState.audioCtx.state === "suspended") {
          await intercomState.audioCtx.resume();
        }

        intercomState.stream = await navigator.mediaDevices.getUserMedia({
          audio: true,
        });
        intercomState.source = intercomState.audioCtx.createMediaStreamSource(
          intercomState.stream
        );
      }

      async function startIntercom() {
        await setupIntercomOnce();

        if (!intercomState.isConnected) {
          intercomState.source.connect(intercomState.audioCtx.destination);
          intercomState.isConnected = true;
        }

        fadeNoiseTo(noiseTrack.volume / 2, noiseTrack.fadeTime);
      }

      function stopIntercom() {
        if (intercomState.isConnected) {
          intercomState.source.disconnect();
          intercomState.isConnected = false;
        }

        fadeNoiseTo(noiseTrack.volume, noiseTrack.fadeTime);
      }

      document.getElementById("playNoise").onclick = () => loadAndPlayNoise();

      const intercomBtn = document.getElementById("intercom");
      intercomBtn.addEventListener("pointerdown", startIntercom);
      intercomBtn.addEventListener("pointerup", stopIntercom);
      intercomBtn.addEventListener("pointercancel", stopIntercom);
      intercomBtn.addEventListener("pointerleave", stopIntercom);
    </script>
  </body>
</html>
